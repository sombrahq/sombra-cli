// Code generated by MockGen. DO NOT EDIT.
// Source: internal/core/usecases/repo_prepare.go
//
// Generated by this command:
//
//	mockgen -source=internal/core/usecases/repo_prepare.go -destination=internal/core/usecases/repo_prepare_test.go -package=usecases
//

// Package usecases is a generated GoMock package.
package usecases

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockRepositoryPrepareCase is a mock of RepositoryPrepareCase interface.
type MockRepositoryPrepareCase struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryPrepareCaseMockRecorder
	isgomock struct{}
}

// MockRepositoryPrepareCaseMockRecorder is the mock recorder for MockRepositoryPrepareCase.
type MockRepositoryPrepareCaseMockRecorder struct {
	mock *MockRepositoryPrepareCase
}

// NewMockRepositoryPrepareCase creates a new mock instance.
func NewMockRepositoryPrepareCase(ctrl *gomock.Controller) *MockRepositoryPrepareCase {
	mock := &MockRepositoryPrepareCase{ctrl: ctrl}
	mock.recorder = &MockRepositoryPrepareCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepositoryPrepareCase) EXPECT() *MockRepositoryPrepareCaseMockRecorder {
	return m.recorder
}

// Prepare mocks base method.
func (m *MockRepositoryPrepareCase) Prepare(uri, tag string) (RepositoryPort, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Prepare", uri, tag)
	ret0, _ := ret[0].(RepositoryPort)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Prepare indicates an expected call of Prepare.
func (mr *MockRepositoryPrepareCaseMockRecorder) Prepare(uri, tag any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Prepare", reflect.TypeOf((*MockRepositoryPrepareCase)(nil).Prepare), uri, tag)
}
