// Code generated by MockGen. DO NOT EDIT.
// Source: internal/core/usecases/lib_versions.go
//
// Generated by this command:
//
//	mockgen -source=internal/core/usecases/lib_versions.go -destination=internal/core/usecases/lib_versions_test.go -package=usecases
//

// Package usecases is a generated GoMock package.
package usecases

import (
	reflect "reflect"

	entities "github.com/sombrahq/sombra-cli/internal/core/entities"
	gomock "go.uber.org/mock/gomock"
)

// MockVersionManagerPort is a mock of VersionManagerPort interface.
type MockVersionManagerPort struct {
	ctrl     *gomock.Controller
	recorder *MockVersionManagerPortMockRecorder
	isgomock struct{}
}

// MockVersionManagerPortMockRecorder is the mock recorder for MockVersionManagerPort.
type MockVersionManagerPortMockRecorder struct {
	mock *MockVersionManagerPort
}

// NewMockVersionManagerPort creates a new mock instance.
func NewMockVersionManagerPort(ctrl *gomock.Controller) *MockVersionManagerPort {
	mock := &MockVersionManagerPort{ctrl: ctrl}
	mock.recorder = &MockVersionManagerPortMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockVersionManagerPort) EXPECT() *MockVersionManagerPortMockRecorder {
	return m.recorder
}

// Compare mocks base method.
func (m *MockVersionManagerPort) Compare(v1, v2 entities.Version) (int8, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Compare", v1, v2)
	ret0, _ := ret[0].(int8)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Compare indicates an expected call of Compare.
func (mr *MockVersionManagerPortMockRecorder) Compare(v1, v2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Compare", reflect.TypeOf((*MockVersionManagerPort)(nil).Compare), v1, v2)
}

// GetLatest mocks base method.
func (m *MockVersionManagerPort) GetLatest(tags []string, constraint string) (entities.Version, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLatest", tags, constraint)
	ret0, _ := ret[0].(entities.Version)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLatest indicates an expected call of GetLatest.
func (mr *MockVersionManagerPortMockRecorder) GetLatest(tags, constraint any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLatest", reflect.TypeOf((*MockVersionManagerPort)(nil).GetLatest), tags, constraint)
}

// GetNext mocks base method.
func (m *MockVersionManagerPort) GetNext(tags []string, constraint string, current entities.Version) (entities.Version, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNext", tags, constraint, current)
	ret0, _ := ret[0].(entities.Version)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNext indicates an expected call of GetNext.
func (mr *MockVersionManagerPortMockRecorder) GetNext(tags, constraint, current any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNext", reflect.TypeOf((*MockVersionManagerPort)(nil).GetNext), tags, constraint, current)
}
