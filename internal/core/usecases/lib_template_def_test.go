// Code generated by MockGen. DO NOT EDIT.
// Source: internal/core/usecases/lib_template_def.go
//
// Generated by this command:
//
//	mockgen -source=internal/core/usecases/lib_template_def.go -destination=internal/core/usecases/lib_template_def_test.go -package=usecases
//

// Package usecases is a generated GoMock package.
package usecases

import (
	reflect "reflect"

	entities "github.com/sombrahq/sombra-cli/internal/core/entities"
	gomock "go.uber.org/mock/gomock"
)

// MockTemplateDefManagerPort is a mock of TemplateDefManagerPort interface.
type MockTemplateDefManagerPort struct {
	ctrl     *gomock.Controller
	recorder *MockTemplateDefManagerPortMockRecorder
	isgomock struct{}
}

// MockTemplateDefManagerPortMockRecorder is the mock recorder for MockTemplateDefManagerPort.
type MockTemplateDefManagerPortMockRecorder struct {
	mock *MockTemplateDefManagerPort
}

// NewMockTemplateDefManagerPort creates a new mock instance.
func NewMockTemplateDefManagerPort(ctrl *gomock.Controller) *MockTemplateDefManagerPort {
	mock := &MockTemplateDefManagerPort{ctrl: ctrl}
	mock.recorder = &MockTemplateDefManagerPortMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTemplateDefManagerPort) EXPECT() *MockTemplateDefManagerPortMockRecorder {
	return m.recorder
}

// GetFile mocks base method.
func (m *MockTemplateDefManagerPort) GetFile(dir string) entities.File {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFile", dir)
	ret0, _ := ret[0].(entities.File)
	return ret0
}

// GetFile indicates an expected call of GetFile.
func (mr *MockTemplateDefManagerPortMockRecorder) GetFile(dir any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFile", reflect.TypeOf((*MockTemplateDefManagerPort)(nil).GetFile), dir)
}

// Load mocks base method.
func (m *MockTemplateDefManagerPort) Load(def entities.File) (*entities.TemplateDef, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Load", def)
	ret0, _ := ret[0].(*entities.TemplateDef)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Load indicates an expected call of Load.
func (mr *MockTemplateDefManagerPortMockRecorder) Load(def any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Load", reflect.TypeOf((*MockTemplateDefManagerPort)(nil).Load), def)
}

// Render mocks base method.
func (m *MockTemplateDefManagerPort) Render(def entities.File, vars entities.Mappings) (*entities.TemplateDef, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Render", def, vars)
	ret0, _ := ret[0].(*entities.TemplateDef)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Render indicates an expected call of Render.
func (mr *MockTemplateDefManagerPortMockRecorder) Render(def, vars any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Render", reflect.TypeOf((*MockTemplateDefManagerPort)(nil).Render), def, vars)
}

// Save mocks base method.
func (m *MockTemplateDefManagerPort) Save(def entities.File, templateDef *entities.TemplateDef) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", def, templateDef)
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save.
func (mr *MockTemplateDefManagerPortMockRecorder) Save(def, templateDef any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockTemplateDefManagerPort)(nil).Save), def, templateDef)
}
