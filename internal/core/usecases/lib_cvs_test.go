// Code generated by MockGen. DO NOT EDIT.
// Source: internal/core/usecases/lib_cvs.go
//
// Generated by this command:
//
//	mockgen -source=internal/core/usecases/lib_cvs.go -destination=internal/core/usecases/lib_cvs_test.go -package=usecases
//

// Package mocks is a generated GoMock package.
package usecases

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockRepositoryPort is a mock of RepositoryPort interface.
type MockRepositoryPort struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryPortMockRecorder
	isgomock struct{}
}

// MockRepositoryPortMockRecorder is the mock recorder for MockRepositoryPort.
type MockRepositoryPortMockRecorder struct {
	mock *MockRepositoryPort
}

// NewMockRepositoryPort creates a new mock instance.
func NewMockRepositoryPort(ctrl *gomock.Controller) *MockRepositoryPort {
	mock := &MockRepositoryPort{ctrl: ctrl}
	mock.recorder = &MockRepositoryPortMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepositoryPort) EXPECT() *MockRepositoryPortMockRecorder {
	return m.recorder
}

// Clean mocks base method.
func (m *MockRepositoryPort) Clean() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Clean")
	ret0, _ := ret[0].(error)
	return ret0
}

// Clean indicates an expected call of Clean.
func (mr *MockRepositoryPortMockRecorder) Clean() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Clean", reflect.TypeOf((*MockRepositoryPort)(nil).Clean))
}

// Clone mocks base method.
func (m *MockRepositoryPort) Clone() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Clone")
	ret0, _ := ret[0].(error)
	return ret0
}

// Clone indicates an expected call of Clone.
func (mr *MockRepositoryPortMockRecorder) Clone() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Clone", reflect.TypeOf((*MockRepositoryPort)(nil).Clone))
}

// Diff mocks base method.
func (m *MockRepositoryPort) Diff(commit string) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Diff", commit)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Diff indicates an expected call of Diff.
func (mr *MockRepositoryPortMockRecorder) Diff(commit any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Diff", reflect.TypeOf((*MockRepositoryPort)(nil).Diff), commit)
}

// Dir mocks base method.
func (m *MockRepositoryPort) Dir() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Dir")
	ret0, _ := ret[0].(string)
	return ret0
}

// Dir indicates an expected call of Dir.
func (mr *MockRepositoryPortMockRecorder) Dir() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Dir", reflect.TypeOf((*MockRepositoryPort)(nil).Dir))
}

// GetTags mocks base method.
func (m *MockRepositoryPort) GetTags() ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTags")
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTags indicates an expected call of GetTags.
func (mr *MockRepositoryPortMockRecorder) GetTags() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTags", reflect.TypeOf((*MockRepositoryPort)(nil).GetTags))
}

// Use mocks base method.
func (m *MockRepositoryPort) Use(version string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Use", version)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Use indicates an expected call of Use.
func (mr *MockRepositoryPortMockRecorder) Use(version any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Use", reflect.TypeOf((*MockRepositoryPort)(nil).Use), version)
}

// MockPatchPort is a mock of PatchPort interface.
type MockPatchPort struct {
	ctrl     *gomock.Controller
	recorder *MockPatchPortMockRecorder
	isgomock struct{}
}

// MockPatchPortMockRecorder is the mock recorder for MockPatchPort.
type MockPatchPortMockRecorder struct {
	mock *MockPatchPort
}

// NewMockPatchPort creates a new mock instance.
func NewMockPatchPort(ctrl *gomock.Controller) *MockPatchPort {
	mock := &MockPatchPort{ctrl: ctrl}
	mock.recorder = &MockPatchPortMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPatchPort) EXPECT() *MockPatchPortMockRecorder {
	return m.recorder
}

// Apply mocks base method.
func (m *MockPatchPort) Apply(dir string, patch []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Apply", dir, patch)
	ret0, _ := ret[0].(error)
	return ret0
}

// Apply indicates an expected call of Apply.
func (mr *MockPatchPortMockRecorder) Apply(dir, patch any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Apply", reflect.TypeOf((*MockPatchPort)(nil).Apply), dir, patch)
}
