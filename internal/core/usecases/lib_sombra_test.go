// Code generated by MockGen. DO NOT EDIT.
// Source: internal/core/usecases/lib_sombra.go
//
// Generated by this command:
//
//	mockgen -source=internal/core/usecases/lib_sombra.go -destination=internal/core/usecases/lib_sombra_test.go -package=usecases
//

// Package usecases is a generated GoMock package.
package usecases

import (
	reflect "reflect"

	entities "github.com/sombrahq/sombra-cli/internal/core/entities"
	gomock "go.uber.org/mock/gomock"
)

// MockSombraDefManagerPort is a mock of SombraDefManagerPort interface.
type MockSombraDefManagerPort struct {
	ctrl     *gomock.Controller
	recorder *MockSombraDefManagerPortMockRecorder
	isgomock struct{}
}

// MockSombraDefManagerPortMockRecorder is the mock recorder for MockSombraDefManagerPort.
type MockSombraDefManagerPortMockRecorder struct {
	mock *MockSombraDefManagerPort
}

// NewMockSombraDefManagerPort creates a new mock instance.
func NewMockSombraDefManagerPort(ctrl *gomock.Controller) *MockSombraDefManagerPort {
	mock := &MockSombraDefManagerPort{ctrl: ctrl}
	mock.recorder = &MockSombraDefManagerPortMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSombraDefManagerPort) EXPECT() *MockSombraDefManagerPortMockRecorder {
	return m.recorder
}

// GetFile mocks base method.
func (m *MockSombraDefManagerPort) GetFile(dir string) entities.File {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFile", dir)
	ret0, _ := ret[0].(entities.File)
	return ret0
}

// GetFile indicates an expected call of GetFile.
func (mr *MockSombraDefManagerPortMockRecorder) GetFile(dir any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFile", reflect.TypeOf((*MockSombraDefManagerPort)(nil).GetFile), dir)
}

// Load mocks base method.
func (m *MockSombraDefManagerPort) Load(fn entities.File) (*entities.SombraDef, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Load", fn)
	ret0, _ := ret[0].(*entities.SombraDef)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Load indicates an expected call of Load.
func (mr *MockSombraDefManagerPortMockRecorder) Load(fn any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Load", reflect.TypeOf((*MockSombraDefManagerPort)(nil).Load), fn)
}

// Save mocks base method.
func (m *MockSombraDefManagerPort) Save(fn entities.File, def *entities.SombraDef) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", fn, def)
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save.
func (mr *MockSombraDefManagerPortMockRecorder) Save(fn, def any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockSombraDefManagerPort)(nil).Save), fn, def)
}
