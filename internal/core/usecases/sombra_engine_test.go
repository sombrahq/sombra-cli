// Code generated by MockGen. DO NOT EDIT.
// Source: internal/core/usecases/sombra_engine.go
//
// Generated by this command:
//
//	mockgen -source=internal/core/usecases/sombra_engine.go -destination=internal/core/usecases/sombra_engine_test.go -package=usecases
//

// Package usecases is a generated GoMock package.
package usecases

import (
	reflect "reflect"

	entities "github.com/sombrahq/sombra-cli/internal/core/entities"
	gomock "go.uber.org/mock/gomock"
)

// MockSombraStringsPort is a mock of SombraStringsPort interface.
type MockSombraStringsPort struct {
	ctrl     *gomock.Controller
	recorder *MockSombraStringsPortMockRecorder
	isgomock struct{}
}

// MockSombraStringsPortMockRecorder is the mock recorder for MockSombraStringsPort.
type MockSombraStringsPortMockRecorder struct {
	mock *MockSombraStringsPort
}

// NewMockSombraStringsPort creates a new mock instance.
func NewMockSombraStringsPort(ctrl *gomock.Controller) *MockSombraStringsPort {
	mock := &MockSombraStringsPort{ctrl: ctrl}
	mock.recorder = &MockSombraStringsPortMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSombraStringsPort) EXPECT() *MockSombraStringsPortMockRecorder {
	return m.recorder
}

// ProcessContent mocks base method.
func (m *MockSombraStringsPort) ProcessContent(content []byte, mapping entities.MapList) []byte {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProcessContent", content, mapping)
	ret0, _ := ret[0].([]byte)
	return ret0
}

// ProcessContent indicates an expected call of ProcessContent.
func (mr *MockSombraStringsPortMockRecorder) ProcessContent(content, mapping any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProcessContent", reflect.TypeOf((*MockSombraStringsPort)(nil).ProcessContent), content, mapping)
}

// ProcessString mocks base method.
func (m *MockSombraStringsPort) ProcessString(target string, mapping entities.MapList) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProcessString", target, mapping)
	ret0, _ := ret[0].(string)
	return ret0
}

// ProcessString indicates an expected call of ProcessString.
func (mr *MockSombraStringsPortMockRecorder) ProcessString(target, mapping any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProcessString", reflect.TypeOf((*MockSombraStringsPort)(nil).ProcessString), target, mapping)
}

// MockSombraEngineCase is a mock of SombraEngineCase interface.
type MockSombraEngineCase struct {
	ctrl     *gomock.Controller
	recorder *MockSombraEngineCaseMockRecorder
	isgomock struct{}
}

// MockSombraEngineCaseMockRecorder is the mock recorder for MockSombraEngineCase.
type MockSombraEngineCaseMockRecorder struct {
	mock *MockSombraEngineCase
}

// NewMockSombraEngineCase creates a new mock instance.
func NewMockSombraEngineCase(ctrl *gomock.Controller) *MockSombraEngineCase {
	mock := &MockSombraEngineCase{ctrl: ctrl}
	mock.recorder = &MockSombraEngineCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSombraEngineCase) EXPECT() *MockSombraEngineCaseMockRecorder {
	return m.recorder
}

// Combine mocks base method.
func (m *MockSombraEngineCase) Combine(patterns []*entities.Pattern) *entities.MapResult {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Combine", patterns)
	ret0, _ := ret[0].(*entities.MapResult)
	return ret0
}

// Combine indicates an expected call of Combine.
func (mr *MockSombraEngineCaseMockRecorder) Combine(patterns any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Combine", reflect.TypeOf((*MockSombraEngineCase)(nil).Combine), patterns)
}

// Match mocks base method.
func (m *MockSombraEngineCase) Match(file entities.File, mappings []*entities.Pattern) (bool, []*entities.Pattern, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Match", file, mappings)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].([]*entities.Pattern)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Match indicates an expected call of Match.
func (mr *MockSombraEngineCaseMockRecorder) Match(file, mappings any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Match", reflect.TypeOf((*MockSombraEngineCase)(nil).Match), file, mappings)
}

// NewContent mocks base method.
func (m *MockSombraEngineCase) NewContent(content []byte, mappings entities.MapList) []byte {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewContent", content, mappings)
	ret0, _ := ret[0].([]byte)
	return ret0
}

// NewContent indicates an expected call of NewContent.
func (mr *MockSombraEngineCaseMockRecorder) NewContent(content, mappings any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewContent", reflect.TypeOf((*MockSombraEngineCase)(nil).NewContent), content, mappings)
}

// NewFile mocks base method.
func (m *MockSombraEngineCase) NewFile(file entities.File, paths, names entities.MapList) entities.File {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewFile", file, paths, names)
	ret0, _ := ret[0].(entities.File)
	return ret0
}

// NewFile indicates an expected call of NewFile.
func (mr *MockSombraEngineCaseMockRecorder) NewFile(file, paths, names any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewFile", reflect.TypeOf((*MockSombraEngineCase)(nil).NewFile), file, paths, names)
}
